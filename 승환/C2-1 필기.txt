구현과정

코드 - 컴파일 - obj 
.obj  + .lib = .exe

코드에서 컴ㅍ일로 오류나는 것은 컴파일오류(문법적오류)라고 한다
obj - exe 가는 과정에서 오류나면 실행오류
실행오류는 오버플로우가 일어날 수 있는데 이런 경우 보통 타입만 바꿔줘도 충분히 고쳐진다.
이런 오류를 잡아가는 과정을 디버깅이라고 한다.




#include 는 전처리기
stdio.h 처리하기 전에 stdio.h(standard io)를 포함해서 계산해라




변수선언 - 데이터타입 변수명 (ex. int A;)

+데이터타입
ㄴ기본형  - int, char etc   -> 3장
ㄴ파생데이터형 - 배열,포인터  -> 중반부
ㄴ사용자 정의형 - 구조체, 공용체  -> 후반부

+기본데이터형의 종류 + size (컴퓨터가 32byte 일때)
ㄴ문자형 - char (1byte)
ㄴ정수형 - short(2byte), int(4byte), long(4byte)
ㄴ실수형 - float(4byte), double(8byte)

1byte = 8bit
8bit는 255까지 표현가능 음수에 경우 -128부터 127까지 가능
부호비트는 MSB이고 비트의 가장 앞에서 표시한다. 이를 사인이 있다라고 이야기 하고 사인드데이터타입이라고한다.
하지만 음수가 아닌 경우 부호가 없다고 하고 unsigned라고 한다.

부호비트 있는 경우
10000001 = -127
10000000 = -128
11111111 = -1
-인 경우의 가장 작은수부터 시작

유효범위 숫자
1바이트 = -128 ~ 127 / 0 ~ 255
2바이트 = -32768 ~ 32767 / 0 ~ 65535
4바이트 = -2^31 ~ 2^31 -1 / 0 ~ 2^32 - 1




변수명
JAVA와 같고, 특수문자 "_"만 쓸 수 있음
숫자로 시작 x
대소문자 구별 A,a는 다른 변수
특수문자: "_"  (ex. _ab 도 가능)
키워드 X

사용 ->   -저장공간에 실수를 저장
            -저장된 상수를 불러온다. -> 연산에 참여, 출력

int A;
A = 10;
printf("%d", A) 




초기화
상황과 때에 맞게 원하는 값을 갖도록 설정하는 것
char ch = 'null';
char a = 'A';
itnt A = 0;
int K = 200;
까지는 초기화가 맞지만
K = 100;은 초기화가 아니라 변수의 사용이라고 한다.





상수취급
-매크로상수 - 전처리기를 이용해서 정의 #define 정의될 문자 의미 {(ex. #define MAX 100) (ex. #define ERR 틀렸어요)      #define MAX 100하고 밑에 int A = MAX 하면 밑에는 다 100)}
ㄴ 매크로 상수를 쓰는 이유는 수정의 용이함, 가독성
-CONST 변수
const int B = 20;
밑에 B에 rock을 걸어놓아서 밑에서 재정의해도 변하지 않음




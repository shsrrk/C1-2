배열 -> 변수 집합 - 조건1: 같은 데이터 타입의 변수
  |		ㄴ 조건2: 연속적으로 메모리에 저장
  |
  |_ 선언 - 데이터 타입 배열명[크기] -> 크기: '0'보다 큰 정수형 상수
  |         ㄴ 다차원 배열 -> 크기가 2개 이상 => [ ][ ]
  |
  |_접근방법 : 인덱스(첨자) => 0 ~ 크기-1   ex) int arr[5];   
  |				           arr[0] ~~~  arr[4]
  |
  |_for문 많이 쓰인다.
  |
  |_ 초기화: "내가 원하는 값을 선언과 동시에 갖도록 하는 것"


배열초기화 -> int Arr[5] = {1, 2, 3, 4, 5};
	      ㄴ주의사항 -> 초기값의 갯수는 배열의 크기보다 커질 수 없다.
	      |	   ex) int Arr[3] = {1, 2, 3, 4} 이건 컴파일에러 남
	      ㄴ int krr[3] = {0} 에는 전부 0이 들어감
	      ㄴ 부족한 자리에는 0이 들어감


int arr[ ];은 오류가 나지만
int arr[ ] = {1, 2, 3}; 은 예외적으로 가능



다차원배열 초기화 -> 차수가 여러개인 배열 -> [ ] => 차수   1개 -> 1차원 -> 단일 for문
					       차수   2개 -> 2차원 -> 2중 for문
					       차수   3개 -> 3차원 ->  3중 for문	
선언  ex) int [2][3] [1크기][2크기]
2차원 배열은 매트릭스 형태가 아니라. [0][0]  [0][1]  [0][2]  [1][0]  [1][1]  [1][2]이런 형태다.

   
인덱스 -> 1 크기가 항상 마지막에 변한다. 
	int arr[2][3] -> int arr[0][0] -> int arr[1][2]



int arr[2][3] = {1, 2, 3 4, 5, 6};
int arr[2][3] = {{1, 2}, {3, 4, 5}};

int arr[2][3] = {{10, 20, 30}, {40, 50, 60}} 에서 arr[2][3]번째 방의 값은 없다. 배열의 시작은 0이다.


int arr[ ][ ] = {1, 2, 3, 4, 5, 6};
이 성립하려면  다차원배열에서 초기화와 함께 배열의 크기 생략은 반드시 1크기만 가능하다.
ex) int arr[ ][2] = {1, 2, 3, 4, 5, 6} 가능
    int arr[2][ ] = {1, 2, 3, 4, 5, 6}은 불가능


	
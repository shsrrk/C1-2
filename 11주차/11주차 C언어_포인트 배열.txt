*포인터 -> 1. 포인터? => 포인터, 포인터변수
		         ㄴ주소   ㄴ 주소를 저장하는 놈
	  2. *, & 사용법
	     ㄴ* 은 간접참조연산자(역참조) =] 해석: ~가보자 -> 위치: 포인터 앞에 포인터 변수
	     ㄴ& 는 주소구하기 연산자 = 해석: ~주소내놔 -> 모든 변수 앞에 쓰임

3. 배열의 이름과 포인터 변수와의 관계 : 서로 상대방인척 하는 관계
  포인터 변수 선언 -> 일반 변수 선언과 같다. => ex) 데이터타입 변수명
	ㄴ---------> 추가적으로 데이터타입과 변수명 사이에 "*" ex) 포인터 변수 -> int *A;
	배열의 이름 -> 전제조건: 배열의 이름은 배열의 시작주소이다(상수)
예시로	int arr[5]
	int *p = arr;
	arr 시작주소를 1000(가정)
	p에 1000번지가 들어있을 것이다.
	*p - 들어있는 변수로 가보자
	&p - p의 주소 내놔


	주소가 2000이라고 하면 
	*p = arr[0]
	&p = 2000이 나옴


* <-> [ ] => *p ==p[0]
	    *(p+0) == p[0] -> arr[0] == *(arr+0)

int arr[5];
int *p = arr;   --> p = arr;  -> &arr[0] == (&*상쇄 가능)(arr+0)

arr(상수)   p(변수)


포인터 배열 배움
주소를 찍어내고 주소 안에 변수가 있다~ 


int arr[5];
int brr[5];
int *p = arr; -> 주소
p = brr; -> 주소    
ㄴ변수(저장공간)

arr = brr; 은 불가

int arr[5] = {1, 2, 3, 4, 5};
int brr[5] = {10, 20, 30, 40, 50};




int *p;
int A;
int arr[5];  int * arr[5]  <- 이 안에는 주소가 들어가는데 변수의 주소도 들어가고 배열의 주소도 들어간다.
